# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import test_pb2 as test__pb2


class BrokerStub(object):
  """////////////////////////////////////////////////////////////////////////////
  Services
  ////////////////////////////////////////////////////////////////////////////

  Public API for traders
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.new_order = channel.unary_unary(
        '/Broker/new_order',
        request_serializer=test__pb2.TraderRequest.SerializeToString,
        response_deserializer=test__pb2.TraderResponse.FromString,
        )


class BrokerServicer(object):
  """////////////////////////////////////////////////////////////////////////////
  Services
  ////////////////////////////////////////////////////////////////////////////

  Public API for traders
  """

  def new_order(self, request, context):
    """Submits a new order to a Broker.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BrokerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'new_order': grpc.unary_unary_rpc_method_handler(
          servicer.new_order,
          request_deserializer=test__pb2.TraderRequest.FromString,
          response_serializer=test__pb2.TraderResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Broker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MarketDataStub(object):
  """Provides access to real-time market data
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.subscribe = channel.unary_stream(
        '/MarketData/subscribe',
        request_serializer=test__pb2.Empty.SerializeToString,
        response_deserializer=test__pb2.MarketSnapshot.FromString,
        )


class MarketDataServicer(object):
  """Provides access to real-time market data
  """

  def subscribe(self, request, context):
    """Subscribes to a feed of market snapshots.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MarketDataServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.subscribe,
          request_deserializer=test__pb2.Empty.FromString,
          response_serializer=test__pb2.MarketSnapshot.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MarketData', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
